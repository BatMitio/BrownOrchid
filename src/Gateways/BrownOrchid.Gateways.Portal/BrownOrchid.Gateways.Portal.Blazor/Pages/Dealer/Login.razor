@page "/dealer/login"
@using System.ComponentModel.DataAnnotations
@using BrownOrchid.Gateways.Portal.Providers
@using BrownOrchid.Gateways.Portal.Services.Dealer.Interfaces

@inject IDealerService DealerService
@inject TokenAuthenticationStateProvider StateProvider
@inject NavigationManager NavigationManager

<header class="masthead" style="background-image:url('/assets/img/intro-bg.jpg');">
    <div class="intro-body">
        <div class="container">
            <section class="position-relative py-4 py-xl-5">
                <div class="container">
                    <div class="row mb-5">
                        <div class="col-md-8 col-xl-6 text-center mx-auto">
                            <h2>Log in</h2>
                            <p class="w-lg-50">Please log in with your username and password</p>
                        </div>
                    </div>
                    <div class="row d-flex justify-content-center">
                        <div class="col-md-6 col-xl-4">
                            <div class="card mb-5">
                                <div class="card-body d-flex flex-column align-items-center">
                                    <div class="bs-icon-xl bs-icon-circle bs-icon-primary bs-icon my-4" style="background: var(--bs-primary);">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 16 16" class="bi bi-person">
                                            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"></path>
                                        </svg>
                                    </div>
                                    <EditForm Context="EditFormContext" Model="@DataModel" OnValidSubmit="@HandleFormSubmit" class="text-center text-black" method="post">
                                        <DataAnnotationsValidator/>
                                        <ValidationSummary/>

                                        <p class="mt-3 mb-0 error-text">
                                            @Message
                                        </p>

                                        <InputText @bind-Value="DataModel.Username" class="form-control" type="text" name="username" placeholder="Username"/>
                                        <div class="mb-3"></div><InputText @bind-Value="DataModel.Password" class="form-control" type="password" name="password" placeholder="Password"/>
                                        <div class="mb-3"></div>
                                        <div class="mb-3">
                                            <button class="btn btn-primary d-block w-100" type="submit" style="--bs-primary-rgb: 14,39,110;background: var(--bs-primary);border-color: var(--bs-primary);">Login</button>
                                        </div>
                                        <p class="text-muted">Forgot your password?</p>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</header>

@code {

    public class FormData
    {
        [Required]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    public FormData DataModel = new();
    public string? Message { get; set; }

    public async void HandleFormSubmit()
    {
        var result = await DealerService.LoginDealerAsync(DataModel.Username, DataModel.Password);

        if (result.IsValid)
        {
            await StateProvider.SetAuthenticationStateAsync(result.Result);
            NavigationManager.NavigateTo("/", true);
            return;
        }

        InvalidCredentials(result.Errors!);
    }

    private void InvalidCredentials(IEnumerable<string> errors)
    {
        Message = string.Join('\n', errors);
        StateHasChanged();
    }

}